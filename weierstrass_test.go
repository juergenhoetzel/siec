package siec

import (
	"math/big"
	"reflect"
	"testing"
)

func bi(number string) (x *big.Int) {
	x, _ = new(big.Int).SetString(number, 10)
	return
}

func TestWeierstrassAdd(t *testing.T) {
	curve := Params()
	type args struct {
		x1 *big.Int
		y1 *big.Int
		x2 *big.Int
		y2 *big.Int
	}
	tests := []struct {
		name string
		args
		wantX3 *big.Int
		wantY3 *big.Int
	}{
		{
			"random 1",
			args{
				bi("9401625533433638652575061646143786354661053575605257096874423043153532832408"),
				bi("29812092696689224804029604666057203885256018414631354632879231850371827768519"),
				bi("33669164951059895291529381548246980924764615812853140584058668898863009473069"),
				bi("53694327561108894804142233321294231316552594893050746512023842364979256704334"),
			},
			bi("44615512493756832298929241260973601330054959134709159795617803794440164718909"),
			bi("8934791315283707369256052272188039501828485172306672823833054449721126555636"),
		},
		{
			"random 2",
			args{
				bi("21811832294510718129243630983426824753247743233419536290477155827199529275247"),
				bi("43136291885801196909300667290152086655194230801288900479750195269569971020650"),
				bi("42325283288496412220978040063059783022809054897506671957628090554162875089117"),
				bi("18165576653725502968767314182530608335055520447495156101940578150021859259399"),
			},
			bi("31897391084772069303863146214755587259847527180905037234705691586883090002611"),
			bi("18874752199968386793577577519701011349118332920771166919209386914068303941805"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotX3, gotY3 := curve.Add(tt.args.x1, tt.args.y1, tt.args.x2, tt.args.y2)
			if !reflect.DeepEqual(gotX3, tt.wantX3) {
				t.Errorf("Add() gotX3 = %v, want %v", gotX3, tt.wantX3)
			}
			if !reflect.DeepEqual(gotY3, tt.wantY3) {
				t.Errorf("Add() gotY3 = %v, want %v", gotY3, tt.wantY3)
			}
		})
	}
}
